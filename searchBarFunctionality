//I FUCKIGN GIVE uP 

// lmfao u still good??

var recipes = "Fried Rice, Eggs, Salt, Rice, Ginger, Onions\n" +
"Sinangag, Eggs, Salt, Rice, Ginger, Onions\n" +
"Tomato Soup, Onions, Tomatoes, Salt\n" +
"Stir Fry Tomato and Onions, Onions, Tomatoes, Salt\n" +
"Frittata, Cheese, Chicken, Ham, Salt, Eggs\n" +
"Omelette, Cheese, Chicken, Ham, Salt, Eggs\n" +
"Quesadilla, Cheese, Chicken, Ham, Salt, Eggs\n" + // all above are testable

"Bean Burritos, Tortillas, Beans, Cheese, Onions, Peppers\n" +
"Chicken or Turkey Chili Hash with Sweet Potatoes, Onions, Bell Peppers, Peppers, Potatoes, Sweet Potatoes, Chicken, Salt\n" +
"Chipped Beef and Gravy, Butter, Milk, Cheese, Eggs, Worcestershire Sauce, Salt, Sweet Paprika, Dry Mustard, Ground Red Pepper\n" +
"Chicken Noodle Soup, Chicken Broth, Noodles, Parsley, Salt\n" +
"Butternut Squash Soup, Butternut Squash, Ginger, Chicken Broth, Parsley\n" +
"Cream of Carrot Soup, Butter, Onions, Ginger, Chicken Broth, Orange Juice, Carrots, Heavy Cream, Salt, Parsley\n" +
"Baked Potato Soup, Butter, Onion, Potatoes, Chicken Broth, Heavy Cream, Sour Cream, Salt\n" +
"Cold Avocado Soup, Avocados, Garlic, Lime, Salt, Milk\n" +
"Thai Clam Pot, Garlic, Scallion, Mirin, Clams, Basil, Fish Sauce, Noodles\n" +
"Japanese Noodles in Broth, Chicken Broth, Soy Sauce, Sugar, Salt, Noodles\n" +
"Fettucine Alfredo, Pasta, butter, Heavy Cream, Parmesan, Salt\n" +
"Stovetop Macaroni and Cheese, Macaroni, Butter, Milk, Cheese, Eggs, Salt\n" +
"Spaghetti with Garlic and Oil (Aglio e Olio), Spaghetti, Oil, Garlic, Salt\n" +
"Spaghetti Carbonara, Spaghetti, Oil, Bacon, White Wine, Eggs, Salt, Parmesan\n" +
"Chicken Fingers, Chicken, Bread Crumbs, Parmesan, Parsley, Salt, Eggs\n" +
"Sloppy Joe, Onions, Bell Peppers, Garlic, Celery, Salt, Ground Beef, Worcestershire Sauce, Bread, Scallion\n" +
"Ground Beef Tacos, Onions, Ground Beef, Garlic, Salt, Tomatoes, Peppers, Lettuce, Cheese, Salsa, Tortilla\n" +
"Taco Salad, Tortilla Chips, Ground Beef, Cheese, Lettuce, Onions, Tomatoes, Salsa\n" +
"Frittata, Cheese, Chicken, Ham, Salt, Eggs\n" +
"Western or Denver Omelet, Butter, Onions, Bell Peppers, Ham, Eggs, Milk, Salt\n" +
"Souffled Omelet, Eggs, Sugar, Salt, Butter\n" +
"Brussels Sprouts, Brussels Sprouts, Butter, Parmesan, Onions\n" +
"Eggnog, Eggs, Sugar, Heavy Cream\n" +
"Vanilla Icebox Cookies, Flour, Baking Powder, Salt, Butter, Sugar, Eggs\n" +
"Stuffed Raw Vegetables, Butter, Cream Cheese, Salt, Peas, Tomatoes\n" +
"Pumpkin Soup, Butter, Onions, Celery, Pumpkin, Milk, Sugar, Salt\n" +
"Molten Chocolate Cake, Chocolate, Butter, Eggs, Sugar\n" +
"Angel Cake, Flour, Sugar, Salt, Eggs\n" +
"Braised Lentils with Sausage, Sausage, Lentils, Onions, Carrots, Garlic, Chicken Broth, Salt\n" +
"Hard-Boiled Eggs, Eggs\n" +
"Guacamole, Avocados, Lime, Onions, Parsley, Garlic, Salt\n" +
"Refried Beans, Onions, Garlic, Beans, Salt\n" +
"Cheese Enchiladas, Cheese, Tortillas\n" +
"Enchiladas Verdes, Chicken, Sour Cream, Scallion, Salt, Tortillas\n" +
"Margarita, Tequila, Lime, Salt\n" +
"Chicken and Cheese Tamales, Salt, Peppers, Chicken, Butter, Onions, Cheese\n" +
"Seven-Layer Dip, Beans, Avocados, Lime, Sour Cream, Chilis, Tomatoes, Cheese\n" +
"Fried Cheese Sticks, Cheese, Flour, Eggs\n" +
"Buffalo Chicken Wings, Chicken, Flour, Salt, Butter\n" +
"Crispy Potato Skins, Potatoes, Butter, Garlic, Cheese, Salt\n" +
"Nachos, Chips, Cheese\n" +
"Chili Con Carne, Beef, Salt, Onions, Garlic, Peppers, Tomatoes\n" +
"Scotch Eggs, Sausage, Eggs, Flour\n" +
"Chicken Jambalaya, Chicken, Salt, Butter, Sausage, Onions, Bell Peppers, Celery, Garlic, Tomatoes, Rice";




















//adds recipes to map in the beg

// var val = "<?php echo $givenIngredients ?>";


// var userInput = document.getElementById("searchInput").name;



// var input = document.getElementById("searchInput").name;
// var f = input.item(0);

var userIngredients = new Set();

//["eggs", "salt", "rice", "ginger", "onions"];//userInput.split(", ")

var mapOfRecipes = new Map();

var results = new Set();


function startSearch(userInput){
  // var map = new Map();
  // var lines = recipes.split("\n");
  // for(var i = 0; i < lines.length; i++){
  //   var current = lines[i];
  //   var words = current.split(", "); //", " instead???????
  //   //if(!mapOfRecipes.has(words[0])){ // if map does not contain the key // I GIVE UP LETS ASSUME NO REPEATS
  //     var key = words[0];
  //     var s = new Set();
  //     for(var j = 1; j < words.length; j++){
  //       s.add(words[j].replaceAll("\\s+", "").toLowerCase());
  //     }

  //     map.set(key, s); // we add it in
      
  //   // }
  // }
  // //set = size not length
  // mapOfRecipes = map;
  // alert(mapOfRecipes.size);
  // alert("mapOfRecipes.length");
  // alert(userInput.value);
  var inputToParse = userInput.toLowerCase().split(", ");
  //eggs salt rice ginger onions
  // alert(inputToParse.length);
  // alert(userInput);
  var s = new Set(); //BECAUSE FOR SOME REASON CANNOT ACCESS THE VARIABLE THAT IS OUTSIDE SMT AB IT NOT UPDATING OMF
  for(let m = 0; m < inputToParse.length; m++){
    s.add(inputToParse[m]);
  }
  // alert(s.size);
  // s.add("eggs");
  // s.add("salt");
  // s.add("rice");
  // s.add("ginger");
  // s.add("onions"); //REMOVE PLURALS?
  userIngredients = s;
  addRecipe();
  findRecipe();
  /*var foundRecipesTab = */
  // alert(results.size);
  var foundRecipesWindow = window.open('foundRecipes.html');
  
  foundRecipesWindow.onload = function () {
    // foundRecipesWindow.document.getElementById("recipe1Text").innerHTML = "iurwkhsjefiuekwjsdhz";
    // document.getElementById("recipesGrid").appendChild(div);
    var resultsAsArray = Array.from(results);
    if(resultsAsArray.length == 0){
      
      var h1 = foundRecipesWindow.document.createElement("h1");  

      h1.style.paddingTop = "19px";
      h1.style.fontSize = "30px";
      h1.style.color = "#ffffff";
      h1.style.textAlign = "center";
      h1.style.fontWeight = "370";
      h1.style.opacity = "0.5";
      h1.id = "n/a";
      h1.innerHTML = "Sorry, our database could not find any recipes for you :(";
      foundRecipesWindow.document.getElementById("recipesGrid").appendChild(h1);
    }
    for(var n = 0; n < resultsAsArray.length; n++){
      var div = foundRecipesWindow.document.createElement("div");
      // div.style.width = "";
      // div.style.position = ""
      // div.style.top = ""
      div.style.height = "100%";
      div.style.background = "#ffffff";
      div.style.opacity = "0.8";
      div.id = "option" + n;
      
      var h1 = foundRecipesWindow.document.createElement("h1");  

      h1.style.paddingTop = "19px";
      h1.style.fontSize = "30px";
      h1.style.color = "#9378bb";
      h1.style.textAlign = "center";
      h1.style.fontWeight = "370";
      h1.style.opacity = "0.5";
      h1.id = "option" + n + "Title";
      h1.innerHTML = resultsAsArray[n];
      div.appendChild(h1);

      foundRecipesWindow.document.getElementById("recipesGrid").appendChild(div);
    }
  
  };
}






//below only used if clicking to new #href
$(document).ready(function(){
  $("a").on('click', function(event) {
      if (this.hash !== "") {
      event.preventDefault();
      var hash = this.hash;

      // 800 specifies the number of milliseconds it takes to scroll to the specified area
      $('html, body').animate({
          scrollTop: $(hash).offset().top
      }, 800, function(){
          window.location.hash = hash;
      });
      
      }
  });
});




function openResults(){

  window.open('foundRecipes.html');
  //below is a set of resulting recipes
  // var results = methodByDrishyaAndJasmine(userInput.value); //UWRSYJFGHBCYEHRGSBFIUKGHVERISUKFJBIEKJSHFOIKJWESLIDJKOLIWKESNODLIFJQWPILAFHKSNOIJCEBWSKUFJ,BKVEWJS,BDFIOKCESD
  
  
} 


//MOVE TO ELSEWHERE
// var invertMap = new Map();



function addRecipe(){
    // var recipes = new File([""], "recipes.txt", {
    //   type: "text/plain",
    // });

    // var reader = new FileReader();
    // reader.onload = (e) => { 
    //   // THE RECIPES
    //   const file = e.target.result;  
    //   // This is a regular expression to identify carriage  
    //   // Returns and line breaks 
    //   const lines = file.split(/\r\n|\n/); 
    //   textarea.value = lines.join('\n'); 
  
    // };

    // reader.onerror = (e) => alert(e.target.error.name); 

    // reader.readAsText(recipes); 

    

    // var lines = recipes.split("\n");
    // for(var i = 0; i < lines.length; i++){
    //   var words = i.split(", ");
    //   if (!mapOfRecipes.containsKey(words[0])) { // if invertMap does not contain the key
    //     mapOfRecipes.put(words[0], new Set()); // we add it in
    //     for(var j = 1; j < words.length; j++){
    //       mapOfRecipes.get(words[0]).add(words[j].replaceAll("\\s+", "").toLowerCase());
    //     }
    //   }
    // }



    // const iterator = file[Symbol.iterator]();
    
    // let theChar = iterator.nextLine();
    // while (!theChar.done /*&& theChar.value !== ' '*/) {
    //   var acr = theChar.split(",");
    //   if (!invertMap.containsKey(acr[0])) { // if invertMap does not contain the key
    //     invertMap.put(acr[0], new Set()); // we add it in
    //     for (var i = 1; i < acr.length; i++) { // we also add all the other ingredients in
    //       invertMap.get(acr[0]).add(acr[i].replaceAll("\\s+", "").toLowerCase());
    //     }
    //   }

    //   theChar = iterator.nextLine();
    // }






          // // Scanner fileReader = new Scanner(file);
          // while (fileReader.hasNextLine()) {
          //     String data = fileReader.nextLine();
          //     String[] acr = data.split(",");
          //     if (!invertMap.containsKey(acr[0])) { // if invertMap does not contain the key
          //         invertMap.put(acr[0], new HashSet<>()); // we add it in
          //         for (int i = 1; i < acr.length; i++) { // we also add all the other ingredients in
          //             invertMap.get(acr[0]).add(acr[i].replaceAll("\\s+", "").toLowerCase());
          //         }
          //     }
          // }


    var map = new Map();
    var lines = recipes.split("\n");
    for(var i = 0; i < lines.length; i++){
      var current = lines[i];
      var words = current.split(", "); //", " instead???????
      //if(!mapOfRecipes.has(words[0])){ // if map does not contain the key // I GIVE UP LETS ASSUME NO REPEATS
        var key = words[0];
        var s = new Set();
        for(var j = 1; j < words.length; j++){
          s.add(words[j].replaceAll("\\s+", "").toLowerCase());
        }

        map.set(key, s); // we add it in
        
      // }
    }
    //set = size not length
    mapOfRecipes = map;

}





function setUserIngredients(){
  // do i need to declare var outside?
  // var userIngredients = userInput.split(", ")
}






function findRecipe(){ 
  var finalResults = new Set();
  for(let recipeName of mapOfRecipes.keys()){
    // var temp = new Set();
    var ingredients = mapOfRecipes.get(recipeName);   
    
    // var ingredientsAsArray = Array.from(ingredients);
    // var userIngredientsAsArray = Array.from(userIngredients);


    // var temp = userIngredients; 
    // alert(userIngredients);
    // alert(mapOfRecipes.get(recipeName));
    if(compareSets(userIngredients, ingredients)){
      
      // var name = recipeName;
      finalResults.add(recipeName);
      // temp.add(recipeName);
    }
    // temp.forEach(finalResults.add, finalResults)
  }
  
  results = finalResults;

  // var setIter = finalResults.values();

  
  // console.log(setIter.next().value);
  // console.log(setIter.next().value);
  // var iuekrjfhiuckr = setIter.next().split(" ");
  // alert(finalResults.has("Fried Rice"));
}

// var finalResults = new Set();
//     function findRecipe(){ 
    
//       for(let recipeName of mapOfRecipes.keys()){
//         var ingredients = mapOfRecipes.get(recipeName);          
//         if(compareSets(userIngredients, ingredients)){
//           finalResults.add(recipeName);
//         }
//       }
//       alert(finalResults[0]);
//     }






function compareSets(a, b) {
  // if(a.size !== b.size){
  //     return false;
  // }


  // for (var i = 0; i < a.length; i++) {
  //     var value1 = a[i] + "";
  //     var found = false;
  //     for (var j = 0; j < b.length; j++) {
  //       var value2 = b[j] + "";
  //       if(value1 == value2){
  //         alert(value1 + ", " + value2);
  //         found = true;
  //         continue;
  //       }
  //     }
  //     if(!found){
  //         return false;
  //     }
  // }

  // return true;
  if (a.size !== b.size) return false;
  for (var i of a) if (!b.has(i)) return false;
  return true;
}

function displayRecipes(newWindow){
  // document.getElementById("recipe1").innerHTML = "Paragraph changed!";
  // document.write("kerjhsd,xkejwds");
  // var node = document.createElement("DIV");                 // Create a <li> node
  // var textnode = document.createTextNode("Water");         // Create a text node
  // node.appendChild(textnode);                              // Append the text to <li>
  // document.getElementById("myList").appendChild(node);     // Append <li> to <ul> with id="myList"

  // var div = document.createElement("div");
  // div.style.width = "100px";
  // div.style.height = "100px";
  // div.style.background = "red";
  // div.style.color = "white";
  // div.innerHTML = "Hello";

  // document.getElementById("recipesGrid").appendChild(div);
  // document.getElementById("recipes123").innerHTML = "iurwkhsjefiuekwjsdhz";
  var ul = newWindow.document.getElementById("recipes123");
  // getElementsByTagName("ul")[0];
  ul.innerHTML = "new content";

}
